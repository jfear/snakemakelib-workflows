# -*- snakemake -*-
import pandas as pd
from snakemakelib_workflows.scrnaseq import scrnaseq_pca, scrnaseq_qc, _save_align_rseqc_metrics

##############################
# Additional merge rule for transcript alignment files
##############################
def _find_transcript_bam(wildcards):
    tgt = IOTarget(config['settings']['sample_organization'].run_id_re.file,
                   suffix=_merge_tx_suffix(config['bio.ngs.settings']['aligner']))
    m = config['settings']['sample_organization'].sample_re.match(wildcards.prefix)
    return [src for src in make_targets(tgt_re=tgt, samples=_samples) if dirname(src).startswith(m.groupdict()['SM'])]

rule scrnaseq_picard_merge_sam_transcript:
    """scrnaseq picard: merge sam files from transcript alignments.

    NB: always outputs bam files!
    """
    params: cmd = config['bio.ngs.qc.picard']['cmd'] + "MergeSamFiles",
            options = " ".join([config['bio.ngs.qc.picard']['options'],
                                config['bio.ngs.qc.picard']['merge_sam']['options']])
    input: _find_transcript_bam
    output: merge="{prefix}.merge.tx.bam"
    run: 
      if (len(input) > 1):
          inputstr = " ".join(["INPUT={}".format(x) for x in input])
          shell("{cmd} {ips} OUTPUT={out} {opt}".format(cmd=params.cmd, ips=inputstr, out=output.merge, opt=params.options))
      else:
          if exists(output.merge):
              os.unlink(output.merge)
          shutil.copy(input[0], output.merge)

##############################
# pca rule
##############################
rule scrnaseq_pca:
    input: expr = "{prefix}.csv"
    output: pca = "{prefix}.pca.csv",
            pcaobj = "{prefix}.pcaobj.pickle"
    run:
        scrnaseq_pca(config, input, output)

##############################
# Rule to combine Align and RSeQC data
##############################
rule save_align_rseqc_data:
    """Save joint alignment and rseqc data"""
    input: align_log = Align.targets['log'],
           rseqc_read_distribution = RSeQC_readDistribution.targets['txt'],
           rseqc_gene_body_coverage = RSeQC_geneBodyCoverage.targets['txt']
    output: csv = join(config['scrnaseq.workflow']['aggregate_output_dir'], "align_rseqc.csv")
    run:
        _save_align_rseqc_metrics(config, output, Align, RSeQC_readDistribution, RSeQC_geneBodyCoverage)


##############################
# QC - create html report
##############################
annotationstring = ".annotated" if config['bio.ngs.settings']['annotation']['transcript_annot_gtf'] else ""
csv = "{annot}.csv".format(annot=annotationstring)
pcacsv = "{annot}.pca.csv".format(annot=annotationstring)

rule scrnaseq_qc:
    """Perform basic qc on samples. First qc summary report"""
    input: alignqc = join("{path}", "align_rseqc.csv"),
           rpkmforgenes = join("{path}", "rpkmforgenes.merge" + csv) if 'rpkmforgenes' in config['scrnaseq.workflow']['quantification'] else [],
           rpkmforgenespca = join("{path}", "rpkmforgenes.merge" + pcacsv) if 'rpkmforgenes' in config['scrnaseq.workflow']['quantification'] else [],
           rsemgenes = join("{path}", "rsem.merge" + tx + ".genes" + csv) if 'rsem' in config['scrnaseq.workflow']['quantification'] else [],
           rsemisoforms = join("{path}", "rsem.merge" + tx + ".isoforms" + csv) if 'rsem' in config['scrnaseq.workflow']['quantification'] else [],
           rsemgenespca = join("{path}", "rsem.merge" + tx + ".genes" + pcacsv) if 'rsem' in config['scrnaseq.workflow']['quantification'] else [],
           rulegraph = join("{path}", "scrnaseq_all_rulegraph.png"),
           globalconf = join("{path}", "smlconf_global.yaml")
    output: html = join("{path}", "scrnaseq_summary.html")
    run:
        scrnaseq_qc(config, input, output)


rule scrnaseq_qc_new:
    input: alignrseqc = results.aggregate_targets['alignrseqc'],
           rsem = rsem.targets['pca'],
           rpkmforgenes = rpkmforgenes.targets['pca'],
           rulegraph = join("{path}", "scrnaseq_all_rulegraph.png"),
           globalconf = join("{path}", "smlconf_global.yaml")
    output: html = join("{path}", "scrnaseq_summary_new.html")
    run:
        scrnaseq_qc(config, input, output, results=results, rsem=rsem, rpkmforgenes=rpkmforgenes)

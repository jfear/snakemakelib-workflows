# -*- snakemake -*-
import pandas as pd
from snakemakelib.applications.rnaseq import summarize_expression_data
from snakemakelib.plot.sklearn import plot_pca
from snakemakelib_workflows.scrnaseq import scrnaseq_pca

# Additional merge rule for transcript alignment files
rule scrnaseq_picard_merge_sam_transcript:
    """scrnaseq picard: merge sam files from transcript alignments.

    NB: always outputs bam files!
    """
    params: cmd = config['bio.ngs.qc.picard']['cmd'] + "MergeSamFiles",
            options = " ".join([config['bio.ngs.qc.picard']['options'],
                                config['bio.ngs.qc.picard']['merge_sam']['options']])
    input: _find_transcript_bam
    output: merge="{prefix}.merge.tx.bam"
    run: 
      if (len(input) > 1):
          inputstr = " ".join(["INPUT={}".format(x) for x in input])
          shell("{cmd} {ips} OUTPUT={out} {opt}".format(cmd=params.cmd, ips=inputstr, out=output.merge, opt=params.options))
      else:
          if exists(output.merge):
              os.unlink(output.merge)
          shutil.copy(input[0], output.merge)

##############################
# pca rule
##############################
rule scrnaseq_pca:
    input: expr = "{prefix}.csv",
           annotation = config['bio.ngs.settings']['annotation']['transcript_annot_gtf'] if config['bio.ngs.settings']['annotation']['transcript_annot_gtf'] else []
    output: pca = "{prefix}.pca.csv",
            pcaobj = "{prefix}.pcaobj.pickle"
    run:
        scrnaseq_pca(config, input, output)

##############################
# Annotation rule
##############################
def _annotated_data(infile, annotation, **kwargs):
    try:
        from snakemakelib.bio.ngs.rnaseq.utils import read_gene_expression
        df = read_gene_expression(infile, annotation, **kwargs)
        return df
    except:
        raise

rule annotate_expression_data:
    """Annotate expression data"""
    input: expr = "{prefix}{type}.csv",
           annotation = config['bio.ngs.settings']['annotation']['transcript_annot_gtf']
    output: expr = "{prefix}{type,(\.genes|\.isoforms|\.[a-z]+)}.annotated.csv"
    run:
        kwargs = {'unit_id' : "transcript_id" if wildcards.type == ".isoforms" else "gene_id",
                  'unit_name' : "transcript_name" if wildcards.type == ".isoforms" else "gene_name"}
        df = _annotated_data(input.expr, input.annotation, **kwargs)
        with open(output.expr, "w") as fh:
             df.to_csv(fh)


##############################
# Summarization rules
##############################
# We want to make sure summary file matches inputs on label
def _rsem_merge_targets(wildcards):
    return make_targets(tgt_re = config['settings']['sample_organization'].sample_re,
                        samples = _samples,
                        target_suffix = ".".join(["", wildcards.label, wildcards.type]) + '.results')

rule rsem_summarize_expression_data:
    input: _rsem_merge_targets
    output: csv = "{prefix}rsem.{label}{type,(\.genes|\.isoforms)}.csv"
    run:
        summarize_expression_data(input, output.csv,
                                  config['settings']['sample_organization'].sample_re)

def _rpkmforgenes_merge_targets(wildcards):
    return make_targets(tgt_re = config['settings']['sample_organization'].sample_re,
                        samples = _samples,
                        target_suffix = "." + wildcards.label + '.rpkmforgenes')
        
rule rpkmforgenes_summarize_expression_data:
    input: _rpkmforgenes_merge_targets
    output: csv = "{prefix}rpkmforgenes.{label}.csv"
    run:
        summarize_expression_data(input, output.csv,
                                  config['settings']['sample_organization'].sample_re)

##############################
# QC - create html report
##############################
csv = "{annot}.csv".format(annot=annotationstring)
pcacsv = "{annot}.pca.csv".format(annot=annotationstring)

rule scrnaseq_qc:
    """Perform basic qc on samples. First qc summary report"""
    input: align_log = ALIGN_LOG_TARGETS,
           rseqc_read_distribution = RSEQC_READ_DISTRIBUTION,
           rseqc_gene_body_coverage = RSEQC_GENE_BODY_COVERAGE,
           rpkmforgenes = RPKMFORGENES_TARGETS,
           rpkmforgenespca = join("{path}", "rpkmforgenes.merge" + pcacsv) if 'rpkmforgenes' in config['workflows.bio.scrnaseq']['quantification'] else [],
           rsem = RSEM_TARGETS,
           rsemgenes = join("{path}", "rsem.merge.tx.genes" + csv) if 'rsem' in config['workflows.bio.scrnaseq']['quantification'] else [],
           rsemisoforms = join("{path}", "rsem.merge.tx.isoforms" + csv) if 'rsem' in config['workflows.bio.scrnaseq']['quantification'] else [],
           rsemgenespca = join("{path}", "rsem.merge.tx.genes" + pcacsv) if 'rsem' in config['workflows.bio.scrnaseq']['quantification'] else [],
           rulegraph = join("{path}", "scrnaseq_all_rulegraph.png"),
           globalconf = join("{path}", "smlconf_global.yaml")
    output: html = join("{path}", "scrnaseq_summary.html"),
            alignqc = join("{path}", "align_rseqc.csv")
    run:
        scrnaseq_qc(config, input, output)

rule test_qc:
    input: join("{path}", "align_rseqc.csv")
    output: "tabort.txt"
    run:
        pass
